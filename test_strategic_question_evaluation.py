#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫–∞
"""
import os
import sys
import json
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, PROJECT_ROOT)

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    config_path = os.path.join(PROJECT_ROOT, 'public', 'app.config.json')
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def create_sg01_test_question():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å SG01 –∏–∑ q4.json"""
    return {
        "id": "SG01",
        "text": "Why are you selling now?",
        "question_type": "choice-multi",
        "prompt_add": "Score intent of sale. Good: planned retirement/move/strategic refocus. Red: urgent cash need, lawsuits/tax issues, sale due to heavy losses. Penalize contradictions with SG02/SG04. Bands: 0‚Äì19 critical; 20‚Äì49 high; 50‚Äì79 moderate; 80‚Äì100 low."
    }

def create_test_questions_file():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    test_questions = {
        "questions": [
            create_sg01_test_question()
        ]
    }
    
    questions_dir = os.path.join(PROJECT_ROOT, 'public', 'questions')
    os.makedirs(questions_dir, exist_ok=True)
    
    test_file_path = os.path.join(questions_dir, 'test_sg01.json')
    with open(test_file_path, 'w', encoding='utf-8') as f:
        json.dump(test_questions, f, indent=2, ensure_ascii=False)
    
    return 'test_sg01.json'

def create_test_prompt_file():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å AI –ø—Ä–æ–º–ø—Ç–æ–º"""
    test_prompt = """You are an expert business evaluator specializing in risk assessment for business acquisitions and investments.

CRITICAL: You must analyze the SPECIFIC question being asked and the SPECIFIC answer provided. Do NOT give generic responses.

Key Evaluation Principles:
1. Score from 0-100 where 0 = extremely high risk, 100 = extremely low risk
2. READ the "Additional Question Context" carefully - it contains specific scoring guidance
3. MATCH your score to the guidance provided in the context
4. Your explanation must directly address the SPECIFIC question asked

IMPORTANT:
- If the Additional Question Context mentions "Red:" scenarios, those should receive LOW scores (0-19)
- If it mentions "Good:" scenarios, those should receive HIGH scores (80-100)
- Always explain your reasoning based on the SPECIFIC question and answer provided
- Do NOT reference unrelated business scenarios (like DSO, restaurants, etc.) unless they are mentioned in the question

Always provide a numerical score between 0 and 100, where higher scores indicate lower risk.
Your explanation must be directly relevant to the question asked and answer provided.
"""
    
    questions_dir = os.path.join(PROJECT_ROOT, 'public', 'questions')
    os.makedirs(questions_dir, exist_ok=True)
    
    prompt_file_path = os.path.join(questions_dir, 'test_sg01_prompt.txt')
    with open(prompt_file_path, 'w', encoding='utf-8') as f:
        f.write(test_prompt)
    
    return 'test_sg01_prompt.txt'

async def test_search_query_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ù–ï –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("-" * 70)
    
    try:
        from src.backend.py_simple_evaluate import generate_search_query_from_question
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        strategic_questions = [
            {
                "id": "SG01",
                "text": "Why are you selling now?",
                "question_type": "choice-multi"
            },
            {
                "id": "MET.LOC", 
                "text": "Where is the business located?",
                "question_type": "text"
            },
            {
                "id": "SG14",
                "text": "Average time to collect receivables (DSO)",
                "question_type": "choice-single"
            }
        ]
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã)
        regular_questions = [
            {
                "id": "TECH01",
                "text": "What are the latest trends in artificial intelligence?",
                "question_type": "text"
            },
            {
                "id": "GENERAL01",
                "text": "How do you implement machine learning?",
                "question_type": "text"
            }
        ]
        
        print("üìù –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–ù–ï –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã):")
        for question in strategic_questions:
            query = generate_search_query_from_question(question)
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û" if not query else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"  {question['id']}: '{query}' - {status}")
        
        print("\nüìù –û–±—ã—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã):")
        for question in regular_questions:
            query = generate_search_query_from_question(question)
            status = "‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û" if query else "‚ùå –û–®–ò–ë–ö–ê"
            print(f"  {question['id']}: '{query}' - {status}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return False

async def test_sg01_evaluation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É –≤–æ–ø—Ä–æ—Å–∞ SG01"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –≤–æ–ø—Ä–æ—Å–∞ SG01")
    print("-" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    question_file = create_test_questions_file()
    prompt_file = create_test_prompt_file()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {question_file}, {prompt_file}")
    
    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã (–¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å –Ω–∏–∑–∫–∏–π score 0-19)
    critical_answers = {
        "SG01": ["declining_sales", "lawsuits_tax"]  # "Declining sales, Lawsuits or tax issues"
    }
    
    # –•–æ—Ä–æ—à–∏–µ –æ—Ç–≤–µ—Ç—ã (–¥–æ–ª–∂–Ω—ã –¥–∞—Ç—å –≤—ã—Å–æ–∫–∏–π score 80-100)
    good_answers = {
        "SG01": ["retirement_move"]  # "Retirement or move"
    }
    
    test_cases = [
        {
            "name": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–¥–∞–∂–∏",
            "answers": critical_answers,
            "expected_score_range": (0, 19),
            "expected_explanation_keywords": ["risk", "declining", "lawsuit", "critical"]
        },
        {
            "name": "–ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–æ–¥–∞–∂–∏", 
            "answers": good_answers,
            "expected_score_range": (80, 100),
            "expected_explanation_keywords": ["retirement", "planned", "low risk"]
        }
    ]
    
    results = []
    
    try:
        from src.backend.py_simple_evaluate import evaluate_answer_logic
        
        for test_case in test_cases:
            print(f"\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {test_case['name']}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –¥–ª—è evaluate_answer_logic
            answer_values = test_case['answers']['SG01']
            formatted_answer = ", ".join([code.replace('_', ' ').title() for code in answer_values])
            
            test_answers = {
                "SG01": formatted_answer
            }
            
            print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {formatted_answer}")
            
            try:
                result = evaluate_answer_logic(
                    question_id="SG01",
                    all_answers=test_answers,
                    config=config,
                    question_file=question_file,
                    prompt_file=prompt_file
                )
                
                score = result.get('score', 0)
                explanation = result.get('explanation', '')
                
                print(f"üìà –ü–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {score}/100")
                print(f"üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ü–µ–Ω–∫–∏
                expected_min, expected_max = test_case['expected_score_range']
                score_correct = expected_min <= score <= expected_max
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏  
                explanation_correct = any(keyword.lower() in explanation.lower() 
                                        for keyword in test_case['expected_explanation_keywords'])
                
                test_result = {
                    'name': test_case['name'],
                    'score': score,
                    'score_correct': score_correct,
                    'explanation_correct': explanation_correct,
                    'expected_range': test_case['expected_score_range'],
                    'explanation': explanation
                }
                
                results.append(test_result)
                
                status = "‚úÖ –ü–†–û–ô–î–ï–ù" if (score_correct and explanation_correct) else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
                print(f"üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞: {status}")
                
                if not score_correct:
                    print(f"   ‚ùå –û—Ü–µ–Ω–∫–∞ {score} –Ω–µ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ {expected_min}-{expected_max}")
                if not explanation_correct:
                    print(f"   ‚ùå –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
                results.append({
                    'name': test_case['name'],
                    'error': str(e)
                })
        
        return results
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ü–µ–Ω–∫–∏: {e}")
        return []

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    print("=" * 80)
    
    success = True
    
    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    success &= await test_search_query_generation()
    
    # –¢–µ—Å—Ç 2: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ SG01
    results = await test_sg01_evaluation()
    if results:
        success &= all(result.get('score_correct', False) and result.get('explanation_correct', False) 
                      for result in results if 'error' not in result)
    else:
        success = False
    
    print("\n" + "=" * 80)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –í–µ–±-–ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        print("‚úÖ –û—Ü–µ–Ω–∫–∞ SG01 —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())