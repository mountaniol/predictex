#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤ –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–æ–≤
"""
import os
import sys
import json
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ø—É—Ç—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ Python path
PROJECT_ROOT = os.path.abspath(os.path.dirname(__file__))
sys.path.insert(0, PROJECT_ROOT)

def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    config_path = os.path.join(PROJECT_ROOT, 'public', 'app.config.json')
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return None

def create_test_question():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ü–µ–Ω–∫–∏"""
    return {
        "id": "TEST01",
        "text": "What are the latest trends in artificial intelligence and machine learning for business applications?",
        "question_type": "text",
        "prompt_add": "Focus on business impact and practical applications."
    }

def create_test_questions_file():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏"""
    test_questions = {
        "questions": [
            create_test_question()
        ]
    }
    
    questions_dir = os.path.join(PROJECT_ROOT, 'public', 'questions')
    os.makedirs(questions_dir, exist_ok=True)
    
    test_file_path = os.path.join(questions_dir, 'test_questions.json')
    with open(test_file_path, 'w', encoding='utf-8') as f:
        json.dump(test_questions, f, indent=2, ensure_ascii=False)
    
    return 'test_questions.json'

def create_test_prompt_file():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å AI –ø—Ä–æ–º–ø—Ç–æ–º"""
    test_prompt = """You are an expert evaluator. Your task is to evaluate answers to business and technology questions.

Consider the following criteria:
- Accuracy and relevance of the information
- Depth of understanding
- Practical applicability
- Current market trends and developments

Use any additional context provided from web searches to enhance your evaluation.

Provide a score from 0-100 and a detailed explanation."""
    
    questions_dir = os.path.join(PROJECT_ROOT, 'public', 'questions')
    os.makedirs(questions_dir, exist_ok=True)
    
    prompt_file_path = os.path.join(questions_dir, 'test_prompt.txt')
    with open(prompt_file_path, 'w', encoding='utf-8') as f:
        f.write(test_prompt)
    
    return 'test_prompt.txt'

async def test_web_search_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤ –æ—Ü–µ–Ω–∫—É"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤ –æ—Ü–µ–Ω–∫—É –æ—Ç–≤–µ—Ç–æ–≤")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_config()
    if not config:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")
        return False
    
    print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    question_file = create_test_questions_file()
    prompt_file = create_test_prompt_file()
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã: {question_file}, {prompt_file}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    test_answer = """AI and ML are transforming business through automation, predictive analytics, and personalized customer experiences. Companies are using chatbots, recommendation systems, and data-driven decision making to improve efficiency and competitiveness."""
    
    test_answers = {
        "TEST01": test_answer
    }
    
    print(f"üìù –¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç: {test_answer[:100]}...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ü–µ–Ω–∫–∏
        from src.backend.py_simple_evaluate import evaluate_answer_logic
        
        print("\nüîç –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤–µ–±-–ø–æ–∏—Å–∫–æ–º...")
        
        result = evaluate_answer_logic(
            question_id="TEST01",
            all_answers=test_answers,
            config=config,
            question_file=question_file,
            prompt_file=prompt_file
        )
        
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏:")
        print(f"–û—Ü–µ–Ω–∫–∞: {result.get('score', 'N/A')}/100")
        print(f"–û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {result.get('explanation', 'N/A')}")
        
        if result.get('score') is not None:
            print("\n‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            return True
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞: –Ω–µ –ø–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ü–µ–Ω–∫–∏")
            return False
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_search_query_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print("\nüî§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("-" * 40)
    
    try:
        from src.backend.py_simple_evaluate import generate_search_query_from_question
        
        test_questions = [
            {
                "text": "What are the latest trends in artificial intelligence?",
                "question_type": "text"
            },
            {
                "text": "How do you implement machine learning in business?",
                "question_type": "text"
            },
            {
                "text": "What is your experience with cloud technologies?",
                "question_type": "text"
            }
        ]
        
        for i, question in enumerate(test_questions, 1):
            query = generate_search_query_from_question(question)
            print(f"{i}. –í–æ–ø—Ä–æ—Å: {question['text'][:50]}...")
            print(f"   –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{query}'")
            print()
        
        print("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ –≤ –æ—Ü–µ–Ω–∫–µ")
    print("=" * 70)
    
    success = True
    
    # –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    success &= await test_search_query_generation()
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Ü–µ–Ω–∫–æ–π
    success &= await test_web_search_integration()
    
    print("\n" + "=" * 70)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("üîç –í–µ–±-–ø–æ–∏—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏")
        print("üåê –ü–æ–∏—Å–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
    
    return success

if __name__ == "__main__":
    asyncio.run(main())