"""
–ü—Ä–æ–≤–∞–π–¥–µ—Ä DuckDuckGo –¥–ª—è –æ–±—â–µ–≥–æ –≤–µ–±-–ø–æ–∏—Å–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangChain
"""
import asyncio
import logging
import re
from typing import List, Dict, Any, Optional
from functools import partial
from datetime import datetime

from .search_providers import SearchProvider
from .search_models import SearchQuery, SearchResult

logger = logging.getLogger(__name__)


class DuckDuckGoProvider(SearchProvider):
    """–ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ DuckDuckGo —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangChain"""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.region = config.get("region", "ru-ru")
        self.safe_search_setting = config.get("safe_search", "moderate")
        self.max_results_setting = config.get("max_results", 10)
        self._langchain_wrapper = None
        self._executor = None
        
    def _get_langchain_wrapper(self):
        """–õ–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LangChain wrapper'–∞"""
        if self._langchain_wrapper is None:
            try:
                from langchain_community.utilities import DuckDuckGoSearchAPIWrapper
                
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è LangChain
                safesearch = self._convert_safe_search(self.safe_search_setting)
                
                self._langchain_wrapper = DuckDuckGoSearchAPIWrapper(
                    region=self.region,
                    safesearch=safesearch,
                    time=None,  # –ù–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                    max_results=self.max_results_setting,
                    backend="auto"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º auto –≤–º–µ—Å—Ç–æ deprecated api
                )
                
                logger.info(f"DuckDuckGo LangChain wrapper initialized with region={self.region}, safesearch={safesearch}")
                
            except ImportError as e:
                logger.error(f"Failed to import LangChain DuckDuckGo wrapper: {e}")
                raise
            except Exception as e:
                logger.error(f"Failed to initialize LangChain DuckDuckGo wrapper: {e}")
                raise
                
        return self._langchain_wrapper
        
    def _convert_safe_search(self, safe_search: str) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç safe_search –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ —Ñ–æ—Ä–º–∞—Ç LangChain"""
        safe_search_mapping = {
            "strict": "strict",
            "moderate": "moderate", 
            "off": "off"
        }
        return safe_search_mapping.get(safe_search.lower(), "moderate")
        
    async def search(self, query) -> List[SearchResult]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ DuckDuckGo —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º LangChain"""
        try:
            print(f"\nü¶Ü [DUCKDUCKGO] Search method called")
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ query
            query_obj = query
            if isinstance(query, str):
                from .search_models import SearchQuery
                query_obj = SearchQuery(text=query)
            
            print(f"ü¶Ü [DUCKDUCKGO] Query: '{query_obj.text}', max_results: {query_obj.max_results}")
                
            if not self.validate_query(query_obj):
                print(f"ü¶Ü [DUCKDUCKGO] ‚ùå Query validation failed")
                return []
            
            print(f"ü¶Ü [DUCKDUCKGO] ‚úÖ Query validated, starting async search...")
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            results = await self._async_search(query_obj)
            
            print(f"ü¶Ü [DUCKDUCKGO] Found {len(results)} results, limiting to {query_obj.max_results}")
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            limited_results = results[:query_obj.max_results]
            print(f"ü¶Ü [DUCKDUCKGO] ‚úÖ Returning {len(limited_results)} results")
            return limited_results
            
        except Exception as e:
            print(f"ü¶Ü [DUCKDUCKGO] ‚ùå Search error: {e}")
            logger.error(f"DuckDuckGo search error: {e}")
            return []
            
    async def _async_search(self, query: SearchQuery) -> List[SearchResult]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ LangChain API"""
        try:
            print(f"ü¶Ü [DUCKDUCKGO] Getting LangChain wrapper...")
            wrapper = self._get_langchain_wrapper()
            
            print(f"ü¶Ü [DUCKDUCKGO] Starting search with timeout {self.timeout}s...")
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            loop = asyncio.get_event_loop()
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.wait_for –¥–ª—è timeout
            search_task = loop.run_in_executor(
                self._executor,
                partial(wrapper.run, query.text)
            )
            
            raw_results = await asyncio.wait_for(search_task, timeout=self.timeout)
            print(f"ü¶Ü [DUCKDUCKGO] ‚úÖ LangChain search completed")
            print(f"ü¶Ü [DUCKDUCKGO] Raw results preview: {str(raw_results)[:200]}...")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            print(f"ü¶Ü [DUCKDUCKGO] Converting results to SearchResult format...")
            converted_results = self._convert_langchain_results(raw_results, query)
            print(f"ü¶Ü [DUCKDUCKGO] ‚úÖ Converted to {len(converted_results)} SearchResult objects")
            return converted_results
            
        except asyncio.TimeoutError:
            print(f"ü¶Ü [DUCKDUCKGO] ‚ùå Search timeout after {self.timeout}s")
            logger.error(f"DuckDuckGo search timeout after {self.timeout}s")
            return []
        except Exception as e:
            print(f"ü¶Ü [DUCKDUCKGO] ‚ùå Async search error: {e}")
            logger.error(f"DuckDuckGo async search error: {e}")
            return []
            
    def _convert_langchain_results(self, raw_results: str, query: SearchQuery) -> List[SearchResult]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã LangChain –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç SearchResult"""
        results = []
        
        if not raw_results:
            return results
            
        try:
            logger.debug(f"Converting raw results: {raw_results}")
            
            # LangChain –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ –ø–∞—Ä—Å–∏–Ω–≥—É
            
            # –ü–æ–¥—Ö–æ–¥ 1: –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–π–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º (–ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã)
            paragraphs = [p.strip() for p in raw_results.strip().split('\n\n') if p.strip()]
            
            if not paragraphs:
                # –ü–æ–¥—Ö–æ–¥ 2: –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –æ–¥–∏–Ω–∞—Ä–Ω—ã–º –ø–µ—Ä–µ–Ω–æ—Å–∞–º
                paragraphs = [p.strip() for p in raw_results.strip().split('\n') if p.strip()]
            
            for i, paragraph in enumerate(paragraphs):
                if not paragraph:
                    continue
                
                title = ""
                url = ""
                description = paragraph
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
                
                # –§–æ—Ä–º–∞—Ç 1: [title](url) description
                markdown_match = re.match(r'\[([^\]]+)\]\(([^)]+)\)\s*(.*)', paragraph)
                if markdown_match:
                    title = markdown_match.group(1).strip()
                    url = markdown_match.group(2).strip()
                    description = markdown_match.group(3).strip() or title
                else:
                    # –§–æ—Ä–º–∞—Ç 2: title - description
                    dash_match = re.match(r'^([^-]+)\s*-\s*(.+)$', paragraph)
                    if dash_match:
                        title = dash_match.group(1).strip()
                        description = dash_match.group(2).strip()
                    else:
                        # –§–æ—Ä–º–∞—Ç 3: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        words = paragraph.split()
                        if len(words) > 5:
                            title = " ".join(words[:5]) + "..."
                            description = paragraph
                        else:
                            title = paragraph
                            description = paragraph
                
                # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
                title = re.sub(r'\s+', ' ', title).strip()
                description = re.sub(r'\s+', ' ', description).strip()
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if len(title) < 3 and len(description) < 10:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º SearchResult
                result = SearchResult(
                    title=title or f"DuckDuckGo Result {i+1}",
                    content=description,
                    url=url,
                    source="duckduckgo",
                    score=max(0.9 - i * 0.1, 0.1),  # –£–±—ã–≤–∞—é—â–∏–π score
                    timestamp=datetime.now(),
                    metadata={
                        "type": "web_result",
                        "langchain_source": True,
                        "query_type": query.query_type,
                        "position": i + 1,
                        "raw_paragraph": paragraph[:100]  # For debugging
                    }
                )
                
                results.append(result)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if len(results) >= query.max_results:
                    break
                    
        except Exception as e:
            logger.error(f"Error converting LangChain results: {e}")
            logger.debug(f"Raw results: {raw_results}")
            
        return results
        
    async def is_available(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å DuckDuckGo —á–µ—Ä–µ–∑ LangChain"""
        try:
            wrapper = self._get_langchain_wrapper()
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            loop = asyncio.get_event_loop()
            test_task = loop.run_in_executor(
                self._executor,
                partial(wrapper.run, "hello")
            )
            
            result = await asyncio.wait_for(test_task, timeout=8)
            print(f"ü¶Ü [DUCKDUCKGO] Availability test result: {bool(result and len(str(result)) > 10)}")
            
            # –°—á–∏—Ç–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º, –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª–∏–Ω–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤
            return bool(result and len(str(result)) > 10)
            
        except Exception as e:
            print(f"ü¶Ü [DUCKDUCKGO] ‚ùå Availability check failed: {e}")
            logger.error(f"DuckDuckGo availability check failed: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True –¥–ª—è graceful degradation - –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫ –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª
            return True
            
    def get_supported_query_types(self) -> List[str]:
        """DuckDuckGo –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""
        return ["general", "factual", "current"]
        
    async def __aenter__(self):
        """Async context manager enter"""
        # –ù–µ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –∫–∞–∫ –≤ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self._executor:
            self._executor.shutdown(wait=False)
            self._executor = None
            
    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self._executor:
            self._executor.shutdown(wait=False)
            self._executor = None


# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –ø–æ–¥ —Å—Ç–∞—Ä—ã–º –∏–º–µ–Ω–µ–º
DuckDuckGoLangChainProvider = DuckDuckGoProvider